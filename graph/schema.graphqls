type Membership {
  id: ID!
  """
  training represents training course for the membership
  """
  training: String!
  currCnt: Int!
  totalCnt: Int!
  expiry: Time!
  """
  users reperesents users who share this membership
  """
  users: [User!]!
}

scalar Time

type User {
  id: ID!
  name: String!
  phoneNumber: String!
}

type Center {
  id: ID!
  name: String!
  phoneNumber: String!
  memberships: [Membership]!
}

type Query {
  memberships: [Membership]
  membership(membershipID: ID): Membership
  users: [User]
  user(userId: ID): User
  centers: [Center]
  center(centerID: ID): Center
}

input NewUser {
  name: String!
  phoneNumber: String!
  membershipID: ID
}

input NewMembership {
  training: String!
  currCnt: Int!
  totalCnt: Int!
  expiry: Time!
  centerID: ID
}

type Mutation {
  createUser(input: NewUser!): User!
  updateUser(userID: ID!, input: NewUser!): User!
  deleteUser(userID: ID!): User!
  createMembership(input: NewMembership!): Membership!
  updateMembership(membershipID: ID!, input: NewMembership!): Membership!
  deleteMembership(membershipID: ID!): Membership!
}